name: Diff dashboards
description: |
  Run the `dac diff` command of percli to generate diffs between the local dashboards and their remote counterparts on the API server.
  **Note:** Login to an API server is required before running this action. You can use the provided `login` action for this purpose.
inputs:
  directory:
    description: Path to the directory containing the resources consumed by the command (mutually exclusive with `file`).
    required: false
  file:
    description: Path to the file that contains the resources consumed by the command (mutually exclusive with `directory`).
    required: false
  project:
    description: If present, the project scope for this CLI request.
    required: false
runs:
  using: composite
  steps:
    - name: Run the `dac diff` command
      run: |
        percli dac diff \
          $([[ -n "${{ inputs.directory }}" ]] && echo "-d ${{ inputs.directory }}") \
          $([[ -n "${{ inputs.file }}" ]] && echo "-f ${{ inputs.file }}") \
          $([[ -n "${{ inputs.project }}" ]] && echo "--project ${{ inputs.project }}")
      shell: bash

    - name: Post diffs as PR comments
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Directory containing the diff files
          const diffDir = './built';

          // Filter files to include only those with a `.diff` extension
          const diffFiles = fs.readdirSync(diffDir).filter(file => file.endsWith('.diff'));

          if (diffFiles.length === 0) {
            console.log('No diff files found to comment.');
            return;
          }

          // Generate the PR comment with collapsible sections
          let commentBody = `### Dashboard diffs\n\n`;
          for (const file of diffFiles) {
            const filePath = path.join(diffDir, file);
            const diffContent = fs.readFileSync(filePath, 'utf-8').trim();

            if (diffContent) {
              // Include a collapsible section for non-empty diffs
              commentBody += `
          <details>
          <summary>${path.basename(file, '.diff')}:</summary>

          \`\`\`diff
          ${diffContent}
          \`\`\`
          </details>\n\n
              `;
            } else {
              // Add a plain "No change" message for empty diffs
              commentBody += `â¯ˆ ${path.basename(file, '.diff')}:\n*No change*\n\n`;
            }
          }

          // Post the comment
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody.trim() // Ensure no trailing newlines
          });